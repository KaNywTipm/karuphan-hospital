// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
    provider = "prisma-client-js"
    output   = "../src/generated/prisma"
}

// ---------- Enum ----------
enum Role {
    ADMIN
    INTERNAL // บุคลากรภายในกลุ่มงาน
    EXTERNAL // บุคลากรภายนอกกลุ่มงาน
}

enum BorrowerType {
    INTERNAL
    EXTERNAL
}

enum BorrowStatus {
    PENDING // รออนุมัติ
    APPROVED // อนุมัติแล้ว/รอคืน
    RETURNED // คืนแล้ว
    REJECTED // ไม่อนุมัติ / ยกเลิก
    OVERDUE // เกินกำหนดคืน (คำนวณ/อัปเดตตามเวลา)
}

enum EquipmentStatus {
    NORMAL // ปกติ (ว่าง)
    IN_USE // กำลังใช้งาน/ถูกยืม
    BROKEN // ชำรุด
    LOST // สูญหาย
    WAIT_DISPOSE // รอจำหน่าย
    DISPOSED // จำหน่ายแล้ว
}

// ใช้สำหรับ "สภาพตอนคืน" โดยตัดค่า IN_USE ออก
enum ReturnCondition {
    NORMAL
    BROKEN
    LOST
    WAIT_DISPOSE
    DISPOSED
}

// ---------- Models ----------

// หน่วยงาน/สังกัด เพื่อให้ข้อมูลสะอาด ไม่พิมพ์ต่างรูป
model Department {
    id       Int     @id @default(autoincrement())
    name     String  @unique
    isActive Boolean @default(true)

    users User[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@index([isActive])
}

model User {
    id       Int     @id @default(autoincrement())
    password String
    fullName String
    phone    String?
    email    String? @unique
    role     Role    @default(EXTERNAL)
    isActive Boolean @default(true)

    // สังกัด (เลือกได้ หรือเป็น null สำหรับผู้ใช้นอกกลุ่มงาน)
    departmentId Int?
    department   Department? @relation(fields: [departmentId], references: [id], onUpdate: Cascade, onDelete: SetNull)

    // ความสัมพันธ์กับคำขอยืม
    requests       BorrowRequest[] @relation("Requester")
    returnReceipts BorrowRequest[] @relation("Receiver")
    approvals      BorrowRequest[] @relation("Approver")

    auditLogs AuditLog[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@index([role])
    @@index([isActive])
    @@index([departmentId])
}

// หมวดหมู่ครุภัณฑ์
model Category {
    id          Int     @id @default(autoincrement())
    name        String  @unique // เช่น "คอมพิวเตอร์", "เครื่องมือแพทย์"
    description String?
    isActive    Boolean @default(true)

    equipments Equipment[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@index([isActive])
}

// ข้อมูลครุภัณฑ์
model Equipment {
    number       Int             @id @default(autoincrement()) // ลำดับภายใน
    idnum        String?         @unique // หมายเลขครุภัณฑ์ (ถ้ามี)
    code         String          @unique // รหัสครุภัณฑ์หลัก เช่น "6530-008-0711/3"
    name         String
    receivedDate DateTime
    price        Float?
    status       EquipmentStatus @default(NORMAL)
    description  String?

    // หมวดหมู่
    categoryId Int
    category   Category @relation(fields: [categoryId], references: [id], onUpdate: Cascade, onDelete: Restrict)

    // ความสัมพันธ์รายการยืม
    borrowItems BorrowItem[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@index([status])
    @@index([categoryId])
    @@index([code])
    @@index([name])
}

// คำขอยืม (1 คำขอ มีได้หลายรายการครุภัณฑ์)
model BorrowRequest {
    id Int @id @default(autoincrement())

    // ผู้ยื่นคำขอ
    borrowerType BorrowerType

    // ถ้าเป็น INTERNAL → มี requesterId (User)
    requesterId Int?
    requester   User? @relation("Requester", fields: [requesterId], references: [id], onUpdate: Cascade, onDelete: SetNull)

    // กรณี EXTERNAL → เก็บข้อมูลติดต่อไว้ (บังคับที่เลเยอร์แอป)
    externalName  String?
    externalDept  String?
    externalPhone String?

    status BorrowStatus @default(PENDING)

    borrowDate       DateTime? // วันที่ยืม (มักเป็นวันอนุมัติ)
    returnDue        DateTime // กำหนดคืน
    actualReturnDate DateTime? // วันที่คืนจริง

    // สภาพตอนคืน
    returnCondition ReturnCondition?
    returnNotes     String?

    // ผู้รับคืน (Admin)
    receivedById Int?
    receivedBy   User? @relation("Receiver", fields: [receivedById], references: [id], onUpdate: Cascade, onDelete: SetNull)

    // ผู้อนุมัติ (Admin)
    approvedById Int?
    approvedBy   User?     @relation("Approver", fields: [approvedById], references: [id], onUpdate: Cascade, onDelete: SetNull)
    approvedAt   DateTime?

    // เหตุผลต่าง ๆ
    reason       String? // เหตุผลที่ยืม
    notes        String? // หมายเหตุเพิ่มเติม
    rejectReason String? // เหตุผลที่ไม่อนุมัติ

    // รายการครุภัณฑ์ในคำขอ
    items BorrowItem[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@index([status])
    @@index([borrowerType])
    @@index([returnDue])
    @@index([requesterId])
    @@index([approvedById])
    @@index([receivedById])
    @@index([createdAt])
}

// รายการครุภัณฑ์ที่อยู่ภายใต้คำขอยืม
model BorrowItem {
    id Int @id @default(autoincrement())

    requestId   Int
    equipmentId Int

    quantity Int @default(1)

    request   BorrowRequest @relation(fields: [requestId], references: [id], onUpdate: Cascade, onDelete: Cascade)
    equipment Equipment     @relation(fields: [equipmentId], references: [number], onUpdate: Cascade, onDelete: Restrict)

    // ป้องกันการซ้ำอุปกรณ์เดียวกันในคำขอเดียว
    @@unique([requestId, equipmentId])
    // หลายรายงาน/หน้าจอมัก JOIN ตามคู่คีย์นี้
    @@index([equipmentId])
}

// บันทึกกิจกรรม/การเปลี่ยนแปลง
model AuditLog {
    id Int @id @default(autoincrement())

    userId Int?
    user   User? @relation(fields: [userId], references: [id], onUpdate: Cascade, onDelete: SetNull)

    action    String // "CREATE", "UPDATE", "DELETE", "APPROVE", "REJECT", "RETURN" ฯลฯ
    tableName String
    recordId  Int
    oldValue  Json?
    newValue  Json?

    createdAt DateTime @default(now())

    @@index([userId])
    @@index([tableName])
    @@index([createdAt])
}
